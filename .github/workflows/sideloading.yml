# This workflow will build, sign, and package a WinUI 3 MSIX desktop application
# built on .NET.

name: Build package for sideloading

on: 
  workflow_dispatch

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        platform: [x64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: AoE2DELobbyBrowser.sln                         # Replace with your solution name, i.e. App1.sln.
      App_Version: 1.0.0
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Get app version from manifest
      run: |
        echo "Get app version from manifest"
        $path = "AoE2DELobbyBrowser/Package.appxmanifest"
        [xml]$manifest= get-content $path
        $appVersion = [System.Version]::Parse($manifest.Package.Identity.Version).ToString(3)
        echo "App_Version=$appVersion"  | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        Get-ChildItem -Name
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = "AoE2DELobbyBrowser/GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the project
    - name: Create the app package
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}

    # Remove the pfx
    - name: Remove the pfx
      run: |
        Remove-Item -path AoE2DELobbyBrowser/GitHubActionsWorkflow.pfx

    # Move package
    - name: Move package
      run: |
        Move-Item AoE2DELobbyBrowser/Packages/AoE2DELobbyBrowser*/*.msix ./
        Move-Item AoE2DELobbyBrowser/Packages/AoE2DELobbyBrowser*/*.cer ./

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload MSIX package
      uses: actions/upload-artifact@v2
      with:
        name: AoE2DELobbyBrowser ${{ matrix.platform }}
        path: |
          ./*.msix
          ./*.cer
        
    - name: Create a GitHub release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ env.App_Version }}
        name: Release ${{ env.App_Version }}
        artifacts: "./*.msix,./*.cer"
        generateReleaseNotes: true
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}

